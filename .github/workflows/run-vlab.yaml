name: Run VLAB

on:
  workflow_call:
    inputs:
      skip:
        description: "Skip"
        type: boolean
        required: false
        default: false
      fabricatorref:
        description: "Fabricator reference to use"
        type: string
        required: true
      prebuild:
        description: "Pre-build script (e.g. 'just bump fabric v0.42.0')"
        type: string
        required: false
        default: "echo 'Noop pre-build'"
      fabricmode:
        description: "Fabric mode (e.g. spine-leaf, collapsed-core)"
        type: string
        required: false
        default: "spine-leaf"
      mesh:
        description: "Use spine-leaf with mesh-only connections"
        type: boolean
        required: false
        default: false
      gateway:
        description: "Enable gateway"
        type: boolean
        required: false
        default: false
      includeonie:
        description: "Include ONIE into installer"
        type: boolean
        required: false
        default: false
      buildmode:
        description: "Build mode (e.g. iso, usb, manual)"
        type: string
        required: false
        default: "iso"
      vpcmode:
        description: "VPC mode (e.g. l2vni, l3vni)"
        type: string
        required: false
        default: "l2vni"
      releasetest:
        description: "Run Release tests"
        type: boolean
        required: false
        default: false
      hybrid:
        description: "Enable hybrid mode (use env with physical switches)"
        type: boolean
        required: false
        default: false
      upgradefrom:
        description: "Upgrade from version"
        type: string
        required: false
        default: ""
      debug:
        description: "Enable tmate debugging"
        type: boolean
        required: false
        default: false
      pause_on_fail:
        description: "Pause release tests on failure for debugging"
        type: boolean
        required: false
        default: false

permissions:
  contents: read

env:
  # global workflow configs
  slug: "${{ inputs.hybrid && 'h' || 'v' }}-${{ inputs.upgradefrom }}${{ inputs.upgradefrom && '-' || '' }}${{ inputs.fabricmode == 'collapsed-core' && 'cc-' || '' }}${{ inputs.mesh && 'mesh-' || '' }}${{ inputs.gateway && 'gw-' || '' }}${{ inputs.includeonie && 'onie-' || '' }}${{ inputs.buildmode }}-${{ inputs.vpcmode }}${{ inputs.releasetest && '-rt' || '' }}"
  # env vars to configure hhfab
  HHFAB_REG_REPO: 127.0.0.1:30000
  HHFAB_VLAB_COLLECT: true

jobs:
  run:
    if: ${{ !inputs.skip }}
    runs-on: ${{ inputs.hybrid && 'hlab' || 'vlab' }}
    timeout-minutes: "${{ inputs.releasetest && (inputs.hybrid && 250 || 150) || 60 }}"

    steps:
      - name: Runner host
        run: |
          echo "$KUBE_NODE"

      - name: Inputs summary
        run: |
          echo "Inputs:"
          echo "  Fabricator reference: ${{ inputs.fabricatorref }}"
          echo "  Pre-build script: ${{ inputs.prebuild }}"
          echo "  Fabric mode: ${{ inputs.fabricmode }}"
          echo "  Mesh: ${{ inputs.mesh }}"
          echo "  Gateway: ${{ inputs.gateway }}"
          echo "  Include ONIE: ${{ inputs.includeonie }}"
          echo "  Build mode: ${{ inputs.buildmode }}"
          echo "  VPC mode: ${{ inputs.vpcmode }}"
          echo "  Release test: ${{ inputs.releasetest }}"
          echo "  Hybrid: ${{ inputs.hybrid }}"
          echo "  Upgrade from: ${{ inputs.upgradefrom }}"
          echo "  Debug: ${{ inputs.debug }}"
          echo "Calculated:"
          echo "  Slug: ${{ env.slug }}"

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          repository: githedgehog/fabricator
          ref: ${{ inputs.fabricatorref }}
          fetch-depth: 0

      - name: Checkout lab-ci repository
        uses: actions/checkout@v5
        if: ${{ inputs.hybrid }}
        with:
          repository: githedgehog/lab-ci
          path: "./lab-ci"

      - name: Pre-populate hhfab-cache
        run: |
          if [ -d "/hostcache/.hhfab-cache" ]; then
            cp -r /hostcache/.hhfab-cache ~/
          else
            echo "Host cache not available"
          fi

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: false

      - name: Setup local registry
        run: |
          just --timestamp _localreg &

      - name: (${{ inputs.upgradefrom }}) Install hhfab to upgrade from
        if: ${{ inputs.upgradefrom != '' }}
        run: |
          mkdir old
          curl -fsSL https://i.hhdev.io/hhfab | USE_SUDO=false INSTALL_DIR=./old VERSION="${{ inputs.upgradefrom }}" bash

      - name: (${{ inputs.upgradefrom }}) Init hhfab for virtual mode
        if: ${{ inputs.upgradefrom != '' && !inputs.hybrid }}
        run: |
          old/hhfab init -v --dev \
            --fabric-mode=${{ inputs.fabricmode }} \
            --include-onie=${{ inputs.includeonie }} \
            --gateway=${{ inputs.gateway }}
          old/hhfab vlab gen -v ${{ inputs.mesh && '--mesh-links-count=3' || '' }}

      - name: (${{ inputs.upgradefrom }}) Init hhfab for hybrid mode
        if: ${{ inputs.upgradefrom != '' && inputs.hybrid }}
        run: |
          source "./lab-ci/envs/$KUBE_NODE/source.sh"

          old/hhfab init -v --dev \
            --fabric-mode=${{ inputs.fabricmode }} \
            --include-onie=${{ inputs.includeonie }} \
            --gateway=${{ inputs.gateway }} \
            -w "./lab-ci/envs/$KUBE_NODE/wiring.yaml"

      - name: (${{ inputs.upgradefrom }}) Print hhfab versions and generate diagrams
        if: ${{ inputs.upgradefrom != '' }}
        run: |
          old/hhfab versions | tee versions.txt
          old/hhfab diagram --format=drawio
          old/hhfab diagram --format=dot
          old/hhfab diagram --format=mermaid

      # TODO: make controls restricted again when we figure out how to get NTP upstream working for isolated VMs
      - name: (${{ inputs.upgradefrom }}) Run and test ${{ inputs.hybrid && 'hybrid ' || '' }}VLAB
        if: ${{ inputs.upgradefrom != '' }}
        run: |
          export HHFAB_JOIN_TOKEN=$(openssl rand -base64 24)
          old/hhfab vlab up -v \
            --build-mode="${{ inputs.buildmode }}" \
            --vpc-mode="${{ inputs.vpcmode != 'l2vni' && inputs.vpcmode || ''  }}" \
            ${{ inputs.hybrid && '--controls-restricted=false' || '' }} \
            ${{ inputs.hybrid && '--ready switch-reinstall' || '' }} \
            --ready=inspect \
            --ready=setup-vpcs \
            ${{ inputs.upgradefrom != '25.03' && '--ready=setup-peerings' || '' }} \
            --ready=test-connectivity \
            --ready=exit

      - name: (${{ inputs.upgradefrom }}) Prepare debug artifacts
        if: ${{ always() && inputs.upgradefrom != '' }}
        run: |
          mkdir -p _debug/0-before/serial
          cp versions.txt _debug/0-before || true
          cp result/diagram.* _debug/0-before || true
          cp vlab.hhs _debug/0-before || true
          cp -r show-tech-output _debug/0-before || true
          cp .zot/log _debug/zot.log || true
          find ./vlab/vms -type f -name serial.log -exec bash -c 'cp $0 _debug/0-before/serial/$(basename $(dirname $0)).log' {} \; || true

      - name: Pre-build script
        run: |
          echo "Running pre-build script"
          ${{ inputs.prebuild }}

      - name: Build hhfab
        run: |
          just --timestamp oci_repo=127.0.0.1:30000 oci=http push

      - name: Init hhfab for virtual mode
        if: ${{ inputs.upgradefrom == '' && !inputs.hybrid }}
        run: |
          bin/hhfab init -v --dev \
            --fabric-mode=${{ inputs.fabricmode }} \
            --include-onie=${{ inputs.includeonie }} \
            --gateway=${{ inputs.gateway }}
          bin/hhfab vlab gen -v ${{ inputs.mesh && '--mesh-links-count=3' || '' }}

      - name: Init hhfab for hybrid mode
        if: ${{ inputs.upgradefrom == '' && inputs.hybrid }}
        run: |
          source "./lab-ci/envs/$KUBE_NODE/source.sh"
          bin/hhfab init -v --dev \
            --fabric-mode=${{ inputs.fabricmode }} \
            --include-onie=${{ inputs.includeonie }} \
            --gateway=${{ inputs.gateway }} \
            -w "./lab-ci/envs/$KUBE_NODE/wiring.yaml"

      - name: Print hhfab versions and generate diagrams
        run: |
          bin/hhfab versions | tee versions.txt
          bin/hhfab diagram --format=drawio
          bin/hhfab diagram --format=dot
          bin/hhfab diagram --format=mermaid

      # TODO: make controls restricted again when we figure out how to get NTP upstream working for isolated VMs
      - name: ${{ inputs.upgradefrom != '' && 'Upgrade' || 'Run' }} and test ${{ inputs.hybrid && 'hybrid ' || '' }}VLAB
        run: |
          export HHFAB_JOIN_TOKEN=$(openssl rand -base64 24)
          bin/hhfab vlab up -v \
            --build-mode="${{ inputs.buildmode }}" \
            --vpc-mode="${{ inputs.vpcmode }}" \
            ${{ inputs.hybrid && '--controls-restricted=false' || '' }} \
            ${{ (inputs.upgradefrom == '' && inputs.hybrid) && '--ready switch-reinstall' || '' }} \
            --ready=inspect \
            --ready=setup-vpcs \
            --ready=setup-peerings \
            --ready=test-connectivity \
            ${{ inputs.releasetest && '--ready=release-test' || '' }} \
            ${{ inputs.releasetest && inputs.pause_on_fail && '--pause-on-fail' || '' }} \
            --ready=exit \
            ${{ inputs.upgradefrom != '' && '--upgrade' || '' }}

      - name: Upload Release Test Results
        uses: actions/upload-artifact@v4
        if: ${{ inputs.releasetest && !cancelled()}}
        with:
          name: ${{ env.slug }}--test-results
          path: release-test.xml

      - name: Prepare debug artifacts
        if: ${{ always() }}
        run: |
          mkdir -p _debug/1-current/serial
          cp versions.txt _debug/1-current || true
          cp result/diagram.* _debug/1-current || true
          cp vlab.hhs _debug/1-current || true
          cp -r show-tech-output _debug/1-current || true
          cp .zot/log _debug/zot.log || true
          find ./vlab/vms -type f -name serial.log -exec bash -c 'cp $0 _debug/1-current/serial/$(basename $(dirname $0)).log' {} \; || true

        # TODO: make controls restricted again when we figure out how to get NTP upstream working for isolated VMs
      - name: (After) Run ${{ inputs.hybrid && 'hybrid ' || '' }}VLAB one more time
        if: ${{ inputs.upgradefrom != '' }}
        run: |
          export HHFAB_JOIN_TOKEN=$(openssl rand -base64 24)
          bin/hhfab vlab up -v \
            --build-mode="${{ inputs.buildmode }}" \
            --vpc-mode="${{ inputs.vpcmode }}" \
            ${{ inputs.hybrid && '--controls-restricted=false' || '' }} \
            --ready=wait \
            --ready=exit

      - name: (After) Prepare debug artifacts
        if: ${{ always() && inputs.upgradefrom != '' }}
        run: |
          mkdir -p _debug/2-after/serial
          cp versions.txt _debug/2-after || true
          cp result/diagram.* _debug/2-after || true
          cp vlab.hhs _debug/2-after || true
          cp -r show-tech-output _debug/2-after || true
          cp .zot/log _debug/zot.log || true
          find ./vlab/vms -type f -name serial.log -exec bash -c 'cp $0 _debug/2-after/serial/$(basename $(dirname $0)).log' {} \; || true

      - name: Rename debug artifacts for upload
        if: ${{ always() }}
        run: |
          mv _debug fab-${{ github.run_id }}-${{ env.slug }}

      - name: Upload debug artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: fab-${{ github.run_id }}-${{ env.slug }}
          path: fab-${{ github.run_id }}-${{ env.slug }}

      - name: Setup tmate session for debug
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && inputs.debug }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 30
        with:
          limit-access-to-actor: true

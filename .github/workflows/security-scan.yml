name: Security Vulnerability Assessment
on:
  schedule:
    - cron: '0 6 * * 1'
  push:
    branches: [ pau/trivy_scan ]
    paths:
      - '.github/workflows/security-scan.yml'
      - 'security/scripts/**'
      - 'security/**'
  workflow_dispatch:
    inputs:
      severity_filter:
        description: 'Vulnerability severity to scan'
        required: false
        default: 'CRITICAL,HIGH'
        type: choice
        options:
        - 'CRITICAL'
        - 'CRITICAL,HIGH'
        - 'CRITICAL,HIGH,MEDIUM'
      debug_enabled:
        type: boolean
        description: "Enable debug output"
        required: false
        default: false

concurrency:
  group: security-scan
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  actions: read

jobs:
  security-scan:
    runs-on: vlab-h
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup local registry
        run: |
          just --timestamp _localreg &

      - name: Build hhfab
        run: |
          just --timestamp oci_repo=127.0.0.1:30000 oci=http push

      - name: Run VLAB security scan
        env:
          HHFAB_REG_REPO: 127.0.0.1:30000
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VLAB_TIMEOUT: 30
        run: |
          echo "Starting VLAB security scan..."
          ./security/scripts/vlab-trivy-runner.sh

      - name: Collect Trivy scan outputs
        if: always()
        run: |
          echo "## VLAB Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Scan completion status
          echo "### Scan Completion Status" >> $GITHUB_STEP_SUMMARY
          echo "| VM | Status | Images Scanned |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Control VM | $([ "${SCAN_CONTROL_SUCCESS:-false}" = "true" ] && echo "SUCCESS" || echo "FAILED") | ${SCAN_CONTROL_IMAGES:-0} |" >> $GITHUB_STEP_SUMMARY
          if [ "${SCAN_GATEWAY_SKIPPED:-false}" = "true" ]; then
            echo "| Gateway VM | SKIPPED | 0 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Gateway VM | $([ "${SCAN_GATEWAY_SUCCESS:-false}" = "true" ] && echo "SUCCESS" || echo "FAILED") | ${SCAN_GATEWAY_IMAGES:-0} |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| **Total** | **$([ "${SCAN_CONTROL_SUCCESS:-false}" = "true" ] && ([ "${SCAN_GATEWAY_SKIPPED:-false}" = "true" ] || [ "${SCAN_GATEWAY_SUCCESS:-false}" = "true" ]) && echo "SUCCESS" || echo "FAILED")** | **${SCAN_TOTAL_IMAGES:-0}** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Vulnerability statistics
          echo "### Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count | Action Required |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|-----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Critical** | **${CRITICAL_VULNERABILITIES:-0}** | $([ "${CRITICAL_VULNERABILITIES:-0}" -gt 0 ] && echo "Immediate" || echo "None") |" >> $GITHUB_STEP_SUMMARY
          echo "| **High** | **${HIGH_VULNERABILITIES:-0}** | $([ "${HIGH_VULNERABILITIES:-0}" -gt 0 ] && echo "Within 30 days" || echo "None") |" >> $GITHUB_STEP_SUMMARY
          echo "| **Medium** | **${MEDIUM_VULNERABILITIES:-0}** | Monitor |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **${TOTAL_VULNERABILITIES:-0}** | Assessed |" >> $GITHUB_STEP_SUMMARY
          echo "| **Unique CVEs** | **${UNIQUE_CVES:-0}** | Identified |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Risk assessment
          echo "### Risk Assessment" >> $GITHUB_STEP_SUMMARY
          if [ "${CRITICAL_VULNERABILITIES:-0}" -gt 0 ]; then
            echo "**CRITICAL RISK** - ${CRITICAL_VULNERABILITIES} vulnerabilities require immediate attention" >> $GITHUB_STEP_SUMMARY
          elif [ "${HIGH_VULNERABILITIES:-0}" -gt 10 ]; then
            echo "**HIGH RISK** - ${HIGH_VULNERABILITIES} high-severity vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          elif [ "${HIGH_VULNERABILITIES:-0}" -gt 0 ]; then
            echo "**MODERATE RISK** - ${HIGH_VULNERABILITIES} high-severity vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "**LOW RISK** - No critical vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Display Trivy scan outputs for each VM
        if: always()
        run: |
          echo "### Detailed Scan Results by VM" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Control VM results
          if [ -d "trivy-reports/control-1" ]; then
            echo "#### Control VM (control-1)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show full list of images scanned
            echo "**Container Images Scanned (${SCAN_CONTROL_IMAGES:-0} total):**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            if [ -f "trivy-reports/control-1_images.txt" ]; then
              cat "trivy-reports/control-1_images.txt" >> $GITHUB_STEP_SUMMARY
            else
              echo "No images list found" >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show critical vulnerabilities output
            echo "**Critical and High Vulnerabilities:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            find trivy-reports/control-1 -name "*_critical.txt" -type f | while read -r file; do
              echo "=== $(basename "$file" | sed 's/_critical\.txt$//' | sed 's/^[0-9]*-[0-9]*_//') ==="
              if [ -s "$file" ]; then
                head -50 "$file" | tail -n +1
              else
                echo "No critical/high vulnerabilities found"
              fi
              echo ""
            done >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Gateway VM results
          if [ -d "trivy-reports/gateway-1" ] && [ "${SCAN_GATEWAY_SKIPPED:-false}" != "true" ]; then
            echo "#### Gateway VM (gateway-1)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show full list of images scanned
            echo "**Container Images Scanned (${SCAN_GATEWAY_IMAGES:-0} total):**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            if [ -f "trivy-reports/gateway-1_images.txt" ]; then
              cat "trivy-reports/gateway-1_images.txt" >> $GITHUB_STEP_SUMMARY
            else
              echo "No images list found" >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show critical vulnerabilities output
            echo "**Critical and High Vulnerabilities:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            find trivy-reports/gateway-1 -name "*_critical.txt" -type f | while read -r file; do
              echo "=== $(basename "$file" | sed 's/_critical\.txt$//' | sed 's/^[0-9]*-[0-9]*_//') ==="
              if [ -s "$file" ]; then
                head -50 "$file" | tail -n +1
              else
                echo "No critical/high vulnerabilities found"
              fi
              echo ""
            done >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          elif [ "${SCAN_GATEWAY_SKIPPED:-false}" = "true" ]; then
            echo "#### Gateway VM (gateway-1)" >> $GITHUB_STEP_SUMMARY
            echo "Gateway VM scan was skipped due to network configuration failure" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Raw scan results**: trivy-reports/ (by VM)" >> $GITHUB_STEP_SUMMARY

      - name: Upload results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ github.run_number }}
          path: |
            trivy-reports/
            vlab.log
          retention-days: 30

      - name: Security alert
        if: env.CRITICAL_VULNERABILITIES > 0
        run: |
          echo "::warning::Found ${CRITICAL_VULNERABILITIES} critical vulnerabilities requiring immediate attention"

      - name: Setup tmate session for debug
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 30
        with:
          limit-access-to-actor: true


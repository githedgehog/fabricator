#!/usr/bin/expect -f
# Copyright 2024 Hedgehog
# SPDX-License-Identifier: Apache-2.0

set force_conservative 1
set timeout -1

# Initialize variables
set WAIT_READY 0
set VERBOSE 0
set remaining_args {}

# Parse arguments
for {set i 0} {$i < [llength $argv]} {incr i} {
    set arg [lindex $argv $i]
    switch -- $arg {
        "--wait-ready" {
            set WAIT_READY 1
        }
        "-v" {
            set VERBOSE 1
        }
        default {
            lappend remaining_args $arg
        }
    }
}

# Helper function to send log output to stderr
proc log_message {loglevel msg} {
    puts stderr "$loglevel: $msg"
}

# Reassign the remaining arguments
set argv $remaining_args
if {[llength $argv] == 1} {
	puts "No credentials are provided, assume external power reset"
	log_message "EXP-DBG" "No credentials provided, assuming external power reset"
	lassign $argv SW_NAME
	set POWER_RESET 1
} elseif {[llength $argv] == 3} {
	puts "Credentials are provided, will attempt reboot"
	log_message "EXP-DBG" "Credentials provided, will attempt reboot"
	lassign $argv SW_NAME USER PASSWORD
	set POWER_RESET 0
} else {
	puts "Usage: $argv0 SW_NAME \[USER\] \[PASSWORD\] \[--wait-ready\] \[-v\]"
	exit 1
}

set KEY_UP   "\033\[A"
set KEY_DOWN "\033\[B"
set KEY_HOME "\033\[H"
set KEY_PGUP "\033\[5~"
set ONIE_HIGHLIGHT "*ONIE"
set ONIE_CHAIN_INSTALL "*ONIE: Install OS"

set ERROR_CONSOLE 1
set ERROR_LOGIN 2
set ERROR_INSTALL 3
set ERROR_HHFAB 4
set ERROR_UNKNOWN 5

# Check if HHFAB_BIN is set in the environment
if {[info exists env(HHFAB_BIN)]} {
	set HHFAB $env(HHFAB_BIN)
	log_message "EXP-DBG" "Using HHFAB from environment: $HHFAB"
} else {
	# Fallback to look for hhfab in the local folder or in PATH
	if {[file exists "./hhfab"]} {
		set HHFAB "./hhfab"
		log_message "EXP-DBG" "Using HHFAB from current directory"
	} else {
		catch {set HHFAB [exec which hhfab]} result
		if {[string length $result] == 0} {
			puts "Error: hhfab binary not found in HHFAB_BIN, current directory, or PATH."
			log_message "EXP-ERR" "hhfab binary not found in HHFAB_BIN, current directory, or PATH"
			exit 1
		}
		set HHFAB $result
		log_message "EXP-DBG" "Using HHFAB from PATH: $HHFAB"
	}
}

# Verify that HHFAB contains a valid path
if {!([file exists $HHFAB] && [file executable $HHFAB])} {
	log_message "EXP-ERR" "HHFAB does not contain a valid path or is not executable."
	exit $ERROR_HHFAB
}

# connect to the serial console of the switch with hhfab
puts "connecting to serial of $SW_NAME via hhfab serial..."
log_message "EXP-DBG" "Connecting to serial of $SW_NAME via hhfab serial"
set cmd "$HHFAB vlab serial -n $SW_NAME"
if {$VERBOSE} {
    append cmd " -v"
}
set spawn_result [catch {spawn {*}[split $cmd]} spawn_error]
if {$spawn_result != 0} {
	log_message "EXP-ERR" "$HHFAB Failed with: $spawn_error"
	exit $ERROR_HHFAB
}

expect {
	-ex "Type the hot key to suspend the connection: <CTRL>Z" {
		log_message "EXP-DBG" "Connected via first console type"
		send "\r"
	}
	-ex "Use Ctrl+] to escape, if no output try Enter, safe to use Ctrl+C/Ctrl+Z" {
		log_message "EXP-DBG" "Connected via second console type"
		send "\r"
	}
	-ex "The connection was unsuccessful" {
		log_message "EXP-ERR" "Connection unsuccessful"
		exit $ERROR_CONSOLE
	}
	timeout {
		log_message "EXP-ERR" "Connection to console timed out"
		exit $ERROR_CONSOLE
	}
	eof {
		log_message "EXP-ERR" "Connection to console failed"
		exit $ERROR_CONSOLE
	}
	eof {
		set waitval [wait]
		set exit_status [lindex $waitval 3]
		if {$exit_status == 255} {
			log_message "EXP-ERR" "SSH connection failed with exit status 255"
			exit $ERROR_HHFAB
		} else {
			log_message "EXP-ERR" "Connection to console failed (EOF) with exit status $exit_status"
			exit $ERROR_CONSOLE
		}
	}
	default {
		log_message "EXP-ERR" "Unexpected output: [expect_out(buffer)]"
		exit $ERROR_UNKNOWN
	}
}

if { ! $POWER_RESET} {
	log_message "EXP-DBG" "Starting login sequence"
	set timeout 100
	expect {
	# handle wrong user/password
	-ex "Login incorrect" {
		log_message "EXP-ERR" "Login incorrect"
		exit $ERROR_LOGIN
	}
	# handle user login if not already logged in
	-re "$SW_NAME login:" {
		log_message "EXP-DBG" "Sending username"
		send "$USER\r"
		exp_continue
	}
	-ex "Password:" {
		log_message "EXP-DBG" "Sending password"
		send "$PASSWORD\r"
		exp_continue
	}
	# reboot in case we are at the prompt - eventually this will be done via PDU
	-ex "admin@$SW_NAME:~$" {
		log_message "EXP-DBG" "At prompt, initiating reboot"
		send "sudo reboot\r"
	}
	# same for rescue mode
	-ex "ONIE:/ #" {
		log_message "EXP-DBG" "At ONIE prompt, initiating reboot"
		send "reboot\r"
		sleep 5
	}
	timeout {
		log_message "EXP-ERR" "Login to NOS timed out"
		exit $ERROR_LOGIN
	}
	eof {
		log_message "EXP-ERR" "Login to NOS failed (EOF)"
		exit $ERROR_LOGIN
	}
	default {
		log_message "EXP-ERR" "Unexpected output: [expect_out(buffer)]"
		exit $ERROR_UNKNOWN
	}
	}
}

expect -timeout 300 -ex "GNU GRUB" {
	log_message "EXP-DBG" "GRUB Menu detected"
	# Select the ONIE option, and finally the Install OS option
	sleep 1
	send -- "$KEY_HOME"
	set timeout 1
	expect {
		-ex $ONIE_HIGHLIGHT {
			log_message "EXP-DBG" "ONIE option found"
			set timeout -1
			send "\r"
			expect -ex "GNU GRUB"
			send -- "$KEY_HOME"
			sleep 1
			send "\r"
			expect {
				"ONIE: OS Install Mode ..." {
					log_message "EXP-DBG" "Entering OS Install Mode"
				}
				eof {
					log_message "EXP-ERR" "Connection lost before confirming ONIE install mode"
					exit $ERROR_CONSOLE
				}
				timeout {
					log_message "EXP-DBG" "Sending extra return"
					send "\r"
				}
			}
		}
		timeout {
			log_message "EXP-DBG" "ONIE not found, moving down menu"
			send -- "$KEY_DOWN"
			exp_continue
		}
		eof {
			log_message "EXP-ERR" "Connection lost after seeing the GRUB menu"
			exit $ERROR_CONSOLE
		}
	}
} eof {
	log_message "EXP-ERR" "Connection lost during GRUB menu expect"
	exit $ERROR_CONSOLE
} timeout {
	log_message "EXP-ERR" "Failed to reset. GRUB not detected"
	exit $ERROR_INSTALL
}

if {$WAIT_READY} {
	log_message "EXP-DBG" "Starting wait-ready sequence"
	set install_success 0
	# Wait for confirmation of the Install OS option
	log_message "EXP-DBG" "Service discovery started"
	expect -timeout 60 -ex "Starting ONIE Service Discovery" {
		# Wait for successful NOS installation
		expect -timeout 300 -ex "ONIE: NOS install successful" {
			log_message "EXP-DBG" "NOS installed successfully"
			set install_success 1
		} timeout {
			log_message "EXP-ERR" "Failed to install NOS within 5 minutes from service discovery"
		}
	} timeout {
		log_message "EXP-ERR" "Failed to select install mode"
	}

	# Exit if install failed
	if {$install_success == 0} {
		log_message "EXP-ERR" "Installation failed"
		exit $ERROR_INSTALL
	}

	# Wait for the login prompt
	expect -timeout 300 -ex "sonic login:" {
		log_message "EXP-DBG" "Sonic login prompt detected"

	} timeout {
		log_message "EXP-ERR" "Login prompt not detected within 5 minutes"
		exit $ERROR_INSTALL
	}

	# Wait for the "System is ready" message
	expect -timeout 300 -ex "System is ready" {
		log_message "EXP-DBG" "System is ready message detected"
		exit 0
	} timeout {
		log_message "EXP-ERR" "System did not become ready within 5 minutes"
		exit $ERROR_INSTALL
	}
} else {
	log_message "EXP-DBG" "Skipping readiness check"
	exit 0
}
